function [v, R, history] = optimal_phase_shift(h_d, H_r, h_v, error_th,...
    sigma_n_sqr, p_sig, iteration_count, L)
Phi = H_r * diag(h_v);
A = Phi'*Phi;
b = Phi'*h_d;
discrete_levels = linspace(0, 2*pi, L);
N = size(H_r,2);
I = randi([1 L],N,1);
theta = zeros(N,1);
for n=1:N
    theta(n) = discrete_levels(I(n));
end
v = exp(-1i * theta);
arg_max_theta = theta;
prev_obj_value = 0.0;
obj_value=achievable_rate(h_d + H_r*diag(v)*h_v, sigma_n_sqr,p_sig);
max_obj_value = obj_value;
history = zeros(iteration_count+1,2);
history(1) = obj_value;
for iter = 1:iteration_count
    for n=1:N
        tau_n = b(n);
        for l=1:N
            if l~=n
                tau_n = tau_n + A(n,l)*v(l);
            end
        end
        theta_n = -angle(tau_n);
        min_diff = 4*pi;
        for ang=discrete_levels
            diff = abs(ang-theta_n);
            if diff < min_diff
                min_diff = diff;
                theta(n) = ang;
            end
        end
    end
    v = exp(-1i * theta);
    prev_obj_value = obj_value;
    obj_value=achievable_rate(h_d + H_r*diag(v)*h_v, sigma_n_sqr,p_sig);
end
R = obj_value;
end